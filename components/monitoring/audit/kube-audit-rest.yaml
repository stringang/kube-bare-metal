---
kind: Namespace
apiVersion: v1
metadata:
  name: sophon-system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kube-audit-rest
  name: kube-audit-rest
  namespace: sophon-system
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kube-audit-rest
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kube-audit-rest
    spec:
      automountServiceAccountToken: false
      containers:
        - image: docker.io/stringang/kube-audit-rest:1.0.13-alpine
          imagePullPolicy: IfNotPresent
          name: kube-audit-rest
          command:
            - "/kube-audit-rest"
          args:
            - --audit-to-std-log
            - --cert-filename=/etc/kubernetes/ssl/tls.crt
            - --cert-key-filename=/etc/kubernetes/ssl/tls.key
          resources:
            requests:
              cpu:  "200m"
              memory: "100Mi"
            limits:
              cpu: "500m"
              memory: "500Mi"
          ports:
            - containerPort: 9090
              protocol: TCP
              name: https
            - containerPort: 55555
              protocol: TCP
              name: metrics
          volumeMounts:
            - name: certs
              mountPath: "/etc/kubernetes/ssl"
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: certs
          secret:
            secretName: kube-audit-rest
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kube-audit-rest
  name: kube-audit-rest
  namespace: sophon-system
spec:
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    - name: metrics
      port: 55555
      protocol: TCP
      targetPort: metrics
  selector:
    app: kube-audit-rest
  sessionAffinity: None
  type: ClusterIP

---

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app: loggie
    release: prometheus
  name: loggie-agent
  namespace: monitoring
spec:
  namespaceSelector:
    matchNames:
      - monitoring
  endpoints:
    - port: monitor
  selector:
    matchLabels:
      app: loggie
      instance: loggie

---

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kube-audit-rest-cert
  namespace: sophon-system
spec:
  secretName: kube-audit-rest
  dnsNames:
    - kube-audit-rest.sophon-system.svc.cluster.local
    - kube-audit-rest.sophon-system.svc
  issuerRef:
    name: kube-audit-rest-issuer

---

apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: kube-audit-rest-issuer
  namespace: sophon-system
spec:
  selfSigned: {}


---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: kube-audit-rest
  labels:
    app: kube-audit-rest
  annotations:
    cert-manager.io/inject-ca-from: sophon-system/kube-audit-rest-cert
webhooks:
  - name: kube-audit-rest.sophon-system.svc.cluster.local
    failurePolicy: Ignore
    timeoutSeconds: 1
    sideEffects: None
    clientConfig:
      service:
        name: kube-audit-rest
        namespace: sophon-system
        path: "/log-request"
        port: 443
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: [ "kruise-system", "devworkspace-controller", "chaos-mesh", "istio-system", "ingress-nginx", "ingress-waf", "olm", "kube-public", "operators", "kubeapps", "knative-serving", "cert-manager", "kube-system" ]
    rules:
      - operations: [ "CREATE", "UPDATE", "DELETE" ]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources: ["deployments","services", "clonesets", "configmaps", "pods", "secrets", "daemonsets", "statefulsets", "ingresses", "clusterrolebindings", "roles", "persistentvolumes", "persistentvolumeclaims", "!deployments/scale", "!statefulsets/scale", "!clonesets/scale"]
        scope: "*"
      - operations: [ "CREATE", "DELETE" ]
        apiGroups: [ "*" ]
        apiVersions: [ "*" ]
        resources: [ "namespaces" ]
        scope: "*"
      - operations: [ "UPDATE" ]
        apiGroups: [ "*" ]
        apiVersions: [ "*" ]
        resources: [ "deployments/scale" ]
        scope: "*"
    admissionReviewVersions: ["v1"]
